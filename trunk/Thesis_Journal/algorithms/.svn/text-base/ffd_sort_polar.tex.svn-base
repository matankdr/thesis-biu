\begin{algorithm}[htbp]
\caption{Fast Frontier Detector (FFD): Sorting Stage}
\label{alg:ffd_sorting_stage}
\begin{algorithmic}[1]

\Require {$lr$} 
\Comment{set of laser readings}
\Require {$pose$} 
\Comment{current robot position}
\Ensure {$sorted$} 
\Comment{sorted laser readings according to polar coordinates}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%\Statex{\\}
\Function{Polar-Sort}{$lr,pose$}
	\State $sorted \gets \emptyset$
	\State $A_r \gets \emptyset$
	
	
	\Comment{set robot position as origin}
	\ForAll {Point $p \in lr$}
		\State $A_r \gets polar \cup \left\{\term{p.x-pose,x, p.y-pose.y}\right\}$
	\EndFor
	
	\State $sorted \gets$ \Call{Sort}{$A_r$, \textsc{polarComparator}}
	\State \Return $sorted$
\EndFunction 
\Statex{}
\Function{polarComparator}{$p_1,p_2$}
	\State $s \gets \term{p_1.x\cdot p_2.y - p_2.x\cdot p_1.y}$
	\Comment{calculate cross-product of input points}
	\If {$s > 0$}
	\Comment{check the sign of the cross-proudct}
		\State \Return 1
	\ElsIf {$s < 0$}
		\State \Return -1
	\Else
		\State \Return 0 
	\EndIf
\EndFunction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\end{algorithmic}
\end{algorithm}